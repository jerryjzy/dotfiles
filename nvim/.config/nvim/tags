!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/679deea/
$NVIM_TUI_ENABLE_CURSOR_SHAPE	init.vim	/^let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1$/;"	v
$NVIM_TUI_ENABLE_TRUE_COLOR	init.vim	/^let $NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
<A-h>	init.vim	/^nnoremap <A-h> <C-w>h$/;"	m
<A-j>	init.vim	/^nnoremap <A-j> <C-w>j$/;"	m
<A-k>	init.vim	/^nnoremap <A-k> <C-w>k$/;"	m
<A-l>	init.vim	/^nnoremap <A-l> <C-w>l$/;"	m
<C-c>	init.vim	/^vnoremap <C-c> "*y$/;"	m
<Down>	init.vim	/^map <Down> gj$/;"	m
<Leader>b	init.vim	/^nnoremap <Leader>b :CtrlPBuffer<CR>$/;"	m
<Leader>f	init.vim	/^nnoremap <Leader>f :CtrlPMRUFiles<CR>$/;"	m
<Leader>o	init.vim	/^nnoremap <Leader>o :CtrlP<CR>$/;"	m
<Leader>rtw	init.vim	/^nnoremap <Leader>rtw :%s\/\\s\\+$\/\/e<CR>$/;"	m
<Space>	init.vim	/^nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\\<Space>")<CR>$/;"	m
<Space>	init.vim	/^vnoremap <Space> zf$/;"	m
<Up>	init.vim	/^map <Up>   gk$/;"	m
<cr>	autoload/plug.vim	/^    nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>$/;"	m
<leader><leader>	init.vim	/^nnoremap <leader><leader> <C-^>$/;"	m
<leader>fef	init.vim	/^nmap <leader>fef ggVG=$/;"	m
<leader>n	init.vim	/^nmap <leader>n :NERDTreeToggle<CR>$/;"	m
<leader>s<down>	init.vim	/^nmap <leader>s<down>   :rightbelow new<cr>$/;"	m
<leader>s<left>	init.vim	/^nmap <leader>s<left>   :leftabove  vnew<cr>$/;"	m
<leader>s<right>	init.vim	/^nmap <leader>s<right>  :rightbelow vnew<cr>$/;"	m
<leader>s<up>	init.vim	/^nmap <leader>s<up>     :leftabove  new<cr>$/;"	m
<tab>	init.vim	/^noremap <tab> <c-w><c-w>$/;"	m
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DoRemote	init.vim	/^function! DoRemote(arg)$/;"	f
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
NERDTreeHighlightCursorline	init.vim	/^let NERDTreeHighlightCursorline=1$/;"	v
NERDTreeIgnore	init.vim	/^let NERDTreeIgnore = ['tmp', '.yardoc', 'pkg']$/;"	v
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Q	init.vim	/^nnoremap Q <nop>$/;"	m
Quit	init.vim	/^command -nargs=0 Quit :qa!$/;"	c
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
W	init.vim	/^command W w !sudo tee % > \/dev\/null$/;"	c
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = '!'.escape(cmd, '#!%')$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_theme	init.vim	/^let g:airline_theme='gruvbox'$/;"	v
g:ctrlp_by_filename	init.vim	/^let g:ctrlp_by_filename = 1$/;"	v
g:ctrlp_max_depth	init.vim	/^let g:ctrlp_max_depth = 5$/;"	v
g:ctrlp_max_files	init.vim	/^let g:ctrlp_max_files = 600$/;"	v
g:ctrlp_working_path_mode	init.vim	/^let g:ctrlp_working_path_mode = 2$/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:gruvbox_italic	init.vim	/^let g:gruvbox_italic=1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:vimtex_latexmk_build_dir	init.vim	/^let g:vimtex_latexmk_build_dir = ".\/.build\/"$/;"	v
g:vimtex_view_general_viewer	init.vim	/^let g:vimtex_view_general_viewer = "qpdfview"$/;"	v
j	init.vim	/^nnoremap j gj$/;"	m
jj	init.vim	/^imap jj <ESC>$/;"	m
k	init.vim	/^nnoremap k gk$/;"	m
mapleader	init.vim	/^let mapleader=','$/;"	v
maplocalleader	init.vim	/^let maplocalleader=',,'$/;"	v
o	autoload/plug.vim	/^    nnoremap <silent> <buffer> o    :silent! call <SID>preview_commit()<cr>$/;"	m
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:ask	autoload/plug.vim	/^function! s:ask(message)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_handler	autoload/plug.vim	/^function! s:job_handler(job_id, data, event) abort$/;"	f
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim') && exists('*jobwait') && !s:is_win$/;"	v
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload	autoload/plug.vim	/^function! s:reload()$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:shellesc	autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
Ä	init.vim	/^  nmap Ä <C-W><<C-W><$/;"	m
Ö	init.vim	/^  nmap Ö <C-W>><C-W>>$/;"	m
ä	init.vim	/^  nmap ä <C-W>+<C-W>+$/;"	m
ö	init.vim	/^  nmap ö <C-W>-<C-W>-$/;"	m
